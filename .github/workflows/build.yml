name: Build

on:
  push:
    branches: [ build ]
  pull_request:
    branches: [ build ]
  workflow_dispatch:
    # gh api repos/:owner/:repo/actions/workflows/build.yml/dispatches -F ref=master
    # gh workflow run build.yml --ref develop
    # gh workflow run build.yml

jobs:

  build-linux:
    runs-on: ubuntu-latest
    if: true
    env:
      MKL_URL: ""
      # MKL_URL: "https://registrationcenter-download.intel.com/akdlm/irc_nas/tec/16917/l_mkl_2020.4.304.tgz"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Get KALDI_BRANCH (kag-$TAG tag if commit is tagged; current branch name if not)
        run: |
          # Fetch tags on the one fetched commit (shallow clone)
          git fetch --depth=1 origin "+refs/tags/*:refs/tags/*"
          export TAG=$(git tag --points-at HEAD)
          echo "TAG: $TAG"
          if [[ $TAG ]]; then
            echo "KALDI_BRANCH: kag-$TAG"
            echo "KALDI_BRANCH=kag-$TAG" >> $GITHUB_ENV
            echo "KALDI_BRANCH=kag-$TAG" >> $GITHUB_OUTPUT
          else
            echo "KALDI_BRANCH: ${GITHUB_REF/refs\/heads\//}"
            echo "KALDI_BRANCH=${GITHUB_REF/refs\/heads\//}" >> $GITHUB_ENV
            echo "KALDI_BRANCH=${GITHUB_REF/refs\/heads\//}" >> $GITHUB_OUTPUT
          fi

      - name: Get Kaldi commit hash
        id: get-kaldi-commit
        run: |
          KALDI_COMMIT=$(git ls-remote https://github.com/daanzu/kaldi-fork-active-grammar.git $KALDI_BRANCH | cut -f1)
          echo "KALDI_COMMIT: $KALDI_COMMIT"
          echo "KALDI_COMMIT=$KALDI_COMMIT" >> $GITHUB_OUTPUT

      - name: Restore cached native binaries
        id: cache-native-binaries-restore
        uses: actions/cache/restore@v4
        with:
          key: native-${{ runner.os }}-${{ steps.get-kaldi-commit.outputs.KALDI_COMMIT }}-${{ env.MKL_URL }}-v1
          path: |
            kaldi_active_grammar/exec/linux
            kaldi_active_grammar.libs

      - name: Setup just
        run: |
          ls -al $HOME
          mkdir $HOME/bin
          curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to $HOME/bin/
          echo "$HOME/bin" >> $GITHUB_PATH

      - name: Build with dockcross (native binaries & python wheel)
        run: |
          shopt -s nullglob
          echo "KALDI_BRANCH: $KALDI_BRANCH"
          echo "MKL_URL: $MKL_URL"
          just build-dockcross ${{ steps.cache-native-binaries-restore.outputs.cache-hit == 'true' && '--skip-native' || '' }} $KALDI_BRANCH $MKL_URL
          ls -al wheelhouse/
          for whl in wheelhouse/*.whl; do
            unzip -l $whl
          done

      - name: Extract native binaries from wheel after auditwheel repair, to save to cache
        if: steps.cache-native-binaries-restore.outputs.cache-hit != 'true'
        # We do this rather than manually caching all of the various kaldi/openfst libraries in their build locations
        run: |
          shopt -s nullglob
          # Assert there is only one wheel
          WHEEL_COUNT=$(ls wheelhouse/*.whl | wc -l)
          if [ "$WHEEL_COUNT" -ne 1 ]; then
            echo "Error: Expected exactly 1 wheel, found $WHEEL_COUNT"
            ls -al wheelhouse/
            exit 1
          fi
          WHEEL_FILE=$(ls wheelhouse/*.whl)
          echo "Extracting from wheel: $WHEEL_FILE"
          unzip -o $WHEEL_FILE 'kaldi_active_grammar/exec/linux/*'
          unzip -o $WHEEL_FILE 'kaldi_active_grammar.libs/*'
          ls -al kaldi_active_grammar/exec/linux/ kaldi_active_grammar.libs/
          readelf -d kaldi_active_grammar/exec/linux/libkaldi-dragonfly.so | egrep 'NEEDED|RUNPATH|RPATH'

      - name: Save cached native binaries
        if: steps.cache-native-binaries-restore.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          key: ${{ steps.cache-native-binaries-restore.outputs.cache-primary-key }}
          path: |
            kaldi_active_grammar/exec/linux
            kaldi_active_grammar.libs

      - name: Upload native binaries to artifacts
        uses: actions/upload-artifact@v4
        with:
          name: native-linux
          path: |
            kaldi_active_grammar/exec/linux
            kaldi_active_grammar.libs

      - name: Upload Linux wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux
          path: wheelhouse/*

      - name: Examine results
        run: |
          shopt -s nullglob
          for whl in wheelhouse/*.whl; do
            echo "::notice title=Built wheel::$(basename $whl)"
            unzip -l $whl
          done

  build-windows:
    runs-on: windows-2025
    if: true
    env:
      VS_VERSION: vs2022
      PLATFORM_TOOLSET: v143
      WINDOWS_TARGET_PLATFORM_VERSION: 10.0
      MKL_VERSION: 2025.1.0
    defaults:
      run:
        shell: bash
    steps:

      - name: Checkout main repository
        uses: actions/checkout@v5
        with:
          path: main

      - name: Get KALDI_BRANCH (kag-$TAG tag if commit is tagged; current branch name if not)
        id: get-kaldi-branch
        working-directory: main
        run: |
          # Fetch tags on the one fetched commit (shallow clone)
          git fetch --depth=1 origin "+refs/tags/*:refs/tags/*"
          export TAG=$(git tag --points-at HEAD)
          echo "TAG: $TAG"
          if [[ $TAG ]]; then
            echo "KALDI_BRANCH: kag-$TAG"
            echo "KALDI_BRANCH=kag-$TAG" >> $GITHUB_ENV
            echo "KALDI_BRANCH=kag-$TAG" >> $GITHUB_OUTPUT
          else
            echo "KALDI_BRANCH: ${GITHUB_REF/refs\/heads\//}"
            echo "KALDI_BRANCH=${GITHUB_REF/refs\/heads\//}" >> $GITHUB_ENV
            echo "KALDI_BRANCH=${GITHUB_REF/refs\/heads\//}" >> $GITHUB_OUTPUT
          fi

      - name: Get Kaldi commit hash
        id: get-kaldi-commit
        run: |
          KALDI_COMMIT=$(git ls-remote https://github.com/daanzu/kaldi-fork-active-grammar.git $KALDI_BRANCH | cut -f1)
          echo "KALDI_COMMIT: $KALDI_COMMIT"
          echo "KALDI_COMMIT=$KALDI_COMMIT" >> $GITHUB_OUTPUT

      - name: Restore cached native binaries
        id: cache-native-binaries-restore
        uses: actions/cache/restore@v4
        with:
          key: native-${{ runner.os }}-${{ steps.get-kaldi-commit.outputs.KALDI_COMMIT }}-${{ env.VS_VERSION }}-${{ env.PLATFORM_TOOLSET }}-${{ env.WINDOWS_TARGET_PLATFORM_VERSION }}-${{ env.MKL_VERSION }}-v1
          path: main/kaldi_active_grammar/exec/windows

      - name: Checkout OpenFST repository
        if: steps.cache-native-binaries-restore.outputs.cache-hit != 'true'
        uses: actions/checkout@v5
        with:
          repository: daanzu/openfst
          path: openfst

      - name: Checkout Kaldi repository
        if: steps.cache-native-binaries-restore.outputs.cache-hit != 'true'
        uses: actions/checkout@v5
        with:
          repository: daanzu/kaldi-fork-active-grammar
          path: kaldi
          ref: ${{ steps.get-kaldi-branch.outputs.KALDI_BRANCH }}

      - name: Gather system information
        if: steps.cache-native-binaries-restore.outputs.cache-hit != 'true'
        run: |
          echo $GITHUB_WORKSPACE
          df -h
          echo "Windows SDK Versions:"
          ls -al '/c/Program Files (x86)/Windows Kits/10/Include/'
          echo "Visual Studio Redistributables:"
          # ls -al '/c/Program Files (x86)/Microsoft Visual Studio/2022/Enterprise/VC/Redist/MSVC/'
          # ls -al '/c/Program Files (x86)/Microsoft Visual Studio/2022/Enterprise/VC/Redist/MSVC/14.26.28720'
          # ls -al '/c/Program Files (x86)/Microsoft Visual Studio/2022/Enterprise/VC/Redist/MSVC/v142'
          # ls -al '/c/Program Files (x86)/Microsoft Visual Studio/2022/Enterprise/VC/Redist/MSVC/14.16.27012/x64/Microsoft.VC141.CRT'
          # ls -al '/c/Program Files (x86)/Microsoft Visual Studio/2022/Enterprise/VC/Redist/MSVC/'*/x64/Microsoft.*.CRT
          # ls -alR /c/Program\ Files\ \(x86\)/Microsoft Visual Studio/2022/Enterprise/VC/Redist/MSVC/
          # ls -alR '/c/Program Files (x86)/Microsoft Visual Studio/'2022/Enterprise/VC/Redist/MSVC/
          vswhere
          vswhere -find 'VC\Redist\**\VC_redist.x64.exe'

      - name: Setup Kaldi build configuration
        if: steps.cache-native-binaries-restore.outputs.cache-hit != 'true'
        run: |
          cd kaldi/windows
          cp kaldiwin_mkl.props kaldiwin.props
          cp variables.props.dev variables.props
          # Set openfst location
          perl -pi -e 's/<OPENFST>.*<\/OPENFST>/<OPENFST>$ENV{GITHUB_WORKSPACE}\\openfst<\/OPENFST>/g' variables.props
          perl -pi -e 's/<OPENFSTLIB>.*<\/OPENFSTLIB>/<OPENFSTLIB>$ENV{GITHUB_WORKSPACE}\\openfst\\build_output<\/OPENFSTLIB>/g' variables.props
          perl generate_solution.pl --vsver ${VS_VERSION} --enable-mkl --noportaudio
          # Add additional libfstscript library to dragonfly build file
          sed -i.bak '$i\
            <ItemDefinitionGroup>\
              <Link>\
                <AdditionalDependencies>libfstscript.lib;%(AdditionalDependencies)</AdditionalDependencies>\
              </Link>\
            </ItemDefinitionGroup>' ../kaldiwin_${VS_VERSION}_MKL/kaldiwin/kaldi-dragonfly/kaldi-dragonfly.vcxproj
          perl get_version.pl

      - name: Add msbuild to PATH
        if: steps.cache-native-binaries-restore.outputs.cache-hit != 'true'
        uses: microsoft/setup-msbuild@v2

      - name: Install MKL
        if: steps.cache-native-binaries-restore.outputs.cache-hit != 'true'
        run: winget install --id=Intel.oneMKL -v "${MKL_VERSION}" -e --accept-package-agreements --accept-source-agreements --disable-interactivity

      - name: Build OpenFST
        if: steps.cache-native-binaries-restore.outputs.cache-hit != 'true'
        shell: cmd
        run: msbuild -t:Build -p:Configuration=Release -p:Platform=x64 -p:PlatformToolset=%PLATFORM_TOOLSET% -maxCpuCount -verbosity:minimal openfst/openfst.sln

      - name: Build Kaldi
        if: steps.cache-native-binaries-restore.outputs.cache-hit != 'true'
        shell: cmd
        run: msbuild -t:Build -p:Configuration=Release -p:Platform=x64 -p:PlatformToolset=%PLATFORM_TOOLSET% -p:WindowsTargetPlatformVersion=%WINDOWS_TARGET_PLATFORM_VERSION% -maxCpuCount -verbosity:minimal kaldi/kaldiwin_%VS_VERSION%_MKL/kaldiwin/kaldi-dragonfly/kaldi-dragonfly.vcxproj

      - name: Copy native binaries
        if: steps.cache-native-binaries-restore.outputs.cache-hit != 'true'
        run: |
          mkdir -p main/kaldi_active_grammar/exec/windows
          cp kaldi/kaldiwin_${VS_VERSION}_MKL/kaldiwin/kaldi-dragonfly/x64/Release/kaldi-dragonfly.dll main/kaldi_active_grammar/exec/windows/

      - name: Save cached native binaries
        if: steps.cache-native-binaries-restore.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          key: ${{ steps.cache-native-binaries-restore.outputs.cache-primary-key }}
          path: main/kaldi_active_grammar/exec/windows

      - name: Upload native binaries to artifacts
        uses: actions/upload-artifact@v4
        with:
          name: native-windows
          path: main/kaldi_active_grammar/exec/windows

      - name: Build Python wheel
        working-directory: main
        run: |
          python -m pip -V
          python -m pip install --upgrade setuptools wheel
          env KALDIAG_BUILD_SKIP_NATIVE=1 python setup.py bdist_wheel
          ls -al dist/

      - name: Upload Windows wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows
          path: main/dist/*

      - name: Examine results
        run: |
          shopt -s nullglob
          for whl in main/dist/*.whl; do
            echo "::notice title=Built wheel::$(basename $whl)"
            unzip -l $whl
          done

      # - name: Copy Windows vc_redist
      #   run: |
      #     mkdir -p vc_redist
      #     cp '/c/Program Files (x86)/Microsoft Visual Studio/2022/Enterprise/VC/Redist/MSVC/14.26.28720'/vc_redist.x64.exe vc_redist/
      #     cp '/c/Program Files (x86)/Microsoft Visual Studio/2022/Enterprise/VC/Redist/MSVC/14.26.28720'/x64/Microsoft.*.CRT/* vc_redist/
      # - uses: actions/upload-artifact@v4
      #   with:
      #     name: windows_vc_redist
      #     path: vc_redist/*

  build-macos-arm:
    runs-on: macos-15
    if: true
    env:
      MACOSX_DEPLOYMENT_TARGET: "11.0"
      MKL_URL: ""
      # MKL_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/tec/17172/m_mkl_2020.4.301.dmg
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Get KALDI_BRANCH (kag-$TAG tag if commit is tagged; current branch name if not)
        id: get-kaldi-branch
        run: |
          # Fetch tags on the one fetched commit (shallow clone)
          git fetch --depth=1 origin "+refs/tags/*:refs/tags/*"
          export TAG=$(git tag --points-at HEAD)
          echo "TAG: $TAG"
          if [[ $TAG ]]; then
            echo "KALDI_BRANCH: kag-$TAG"
            echo "KALDI_BRANCH=kag-$TAG" >> $GITHUB_ENV
            echo "KALDI_BRANCH=kag-$TAG" >> $GITHUB_OUTPUT
          else
            echo "KALDI_BRANCH: ${GITHUB_REF/refs\/heads\//}"
            echo "KALDI_BRANCH=${GITHUB_REF/refs\/heads\//}" >> $GITHUB_ENV
            echo "KALDI_BRANCH=${GITHUB_REF/refs\/heads\//}" >> $GITHUB_OUTPUT
          fi

      - name: Get Kaldi commit hash
        id: get-kaldi-commit
        run: |
          KALDI_COMMIT=$(git ls-remote https://github.com/daanzu/kaldi-fork-active-grammar.git $KALDI_BRANCH | cut -f1)
          echo "KALDI_COMMIT: $KALDI_COMMIT"
          echo "KALDI_COMMIT=$KALDI_COMMIT" >> $GITHUB_OUTPUT

      - name: Restore cached native binaries
        id: cache-native-binaries-restore
        uses: actions/cache/restore@v4
        with:
          key: native-${{ runner.os }}-arm-${{ steps.get-kaldi-commit.outputs.KALDI_COMMIT }}-${{ env.MACOSX_DEPLOYMENT_TARGET }}-${{ env.MKL_URL }}-v1
          path: kaldi_active_grammar/exec/macos

      - name: Install MKL (if enabled)
        if: ${{ env.MKL_URL != '' && steps.cache-native-binaries-restore.outputs.cache-hit != 'true' }}
        run: |
          echo "Installing MKL from: $MKL_URL"
          export MKL_FILE=${MKL_URL##*/}
          export MKL_FILE=${MKL_FILE%\.dmg}
          wget --no-verbose $MKL_URL
          hdiutil attach ${MKL_FILE}.dmg
          cp /Volumes/${MKL_FILE}/${MKL_FILE}.app/Contents/MacOS/silent.cfg .
          sed -i.bak -e 's/decline/accept/g' silent.cfg
          sudo /Volumes/${MKL_FILE}/${MKL_FILE}.app/Contents/MacOS/install.sh --silent silent.cfg

      - name: Install dependencies for native build
        if: steps.cache-native-binaries-restore.outputs.cache-hit != 'true'
        run: |
          python3 -m pip install --break-system-packages --user --upgrade scikit-build>=0.10.0 cmake ninja
          brew install automake sox libtool
          brew reinstall gfortran  # For openblas
          # brew install autoconf

      - name: Install dependencies for python build
        run: |
          python3 -m pip install --break-system-packages --user --upgrade setuptools wheel delocate

      - name: Build Python wheel
        run: |
          shopt -s nullglob
          echo "KALDI_BRANCH: $KALDI_BRANCH"
          echo "MKL_URL: $MKL_URL"
          ${{ steps.cache-native-binaries-restore.outputs.cache-hit == 'true' && 'KALDIAG_BUILD_SKIP_NATIVE=1' || '' }} python3 setup.py bdist_wheel
          ls -al dist/
          for whl in dist/*.whl; do
            unzip -l $whl
          done

      - name: Repair wheel with delocate
        run: |
          shopt -s nullglob
          for whl in dist/*.whl; do
            echo "Examining wheel before delocate: $whl"
            python3 -m delocate.cmd.delocate_listdeps -d $whl
            echo "Repairing wheel: $whl"
            python3 -m delocate.cmd.delocate_wheel -v -w wheelhouse -L exec/macos/libs --require-archs arm64 $whl
          done
          # NOTE: This also downgrades the required MacOS version to the minimum possible
          ls -al wheelhouse/
          for whl in wheelhouse/*.whl; do
            echo "Examining repaired wheel: $whl"
            python3 -m delocate.cmd.delocate_listdeps -d $whl
          done

      - name: Extract native binaries from wheel after delocate repair, to save to cache
        if: steps.cache-native-binaries-restore.outputs.cache-hit != 'true'
        # We do this rather than manually caching all of the various kaldi/openfst libraries in their build locations
        run: |
          shopt -s nullglob
          # Assert there is only one wheel
          WHEEL_COUNT=$(ls wheelhouse/*.whl | wc -l)
          if [ "$WHEEL_COUNT" -ne 1 ]; then
            echo "Error: Expected exactly 1 wheel, found $WHEEL_COUNT"
            ls -al wheelhouse/
            exit 1
          fi
          WHEEL_FILE=$(ls wheelhouse/*.whl)
          echo "Extracting from wheel: $WHEEL_FILE"
          unzip -o $WHEEL_FILE 'kaldi_active_grammar/exec/macos/*'
          ls -al kaldi_active_grammar/exec/macos/
          otool -l kaldi_active_grammar/exec/macos/libkaldi-dragonfly.dylib | egrep -A2 'LC_RPATH|cmd LC_LOAD_DYLIB'
          otool -L kaldi_active_grammar/exec/macos/libkaldi-dragonfly.dylib
          lipo -archs kaldi_active_grammar/exec/macos/libkaldi-dragonfly.dylib

      - name: Save cached native binaries
        if: steps.cache-native-binaries-restore.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          key: ${{ steps.cache-native-binaries-restore.outputs.cache-primary-key }}
          path: kaldi_active_grammar/exec/macos

      - name: Upload native binaries to artifacts
        uses: actions/upload-artifact@v4
        with:
          name: native-macos-arm
          path: kaldi_active_grammar/exec/macos

      - name: Upload MacOS ARM wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-arm
          path: wheelhouse/*

      - name: Examine results
        run: |
          shopt -s nullglob
          for whl in wheelhouse/*.whl; do
            echo "::notice title=Built wheel::$(basename $whl)"
            unzip -l $whl
          done

  build-macos-intel:
    runs-on: macos-13
    if: true
    env:
      MACOSX_DEPLOYMENT_TARGET: "10.9"
      MKL_URL: ""
      # MKL_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/tec/17172/m_mkl_2020.4.301.dmg
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Get KALDI_BRANCH (kag-$TAG tag if commit is tagged; current branch name if not)
        id: get-kaldi-branch
        run: |
          # Fetch tags on the one fetched commit (shallow clone)
          git fetch --depth=1 origin "+refs/tags/*:refs/tags/*"
          export TAG=$(git tag --points-at HEAD)
          echo "TAG: $TAG"
          if [[ $TAG ]]; then
            echo "KALDI_BRANCH: kag-$TAG"
            echo "KALDI_BRANCH=kag-$TAG" >> $GITHUB_ENV
            echo "KALDI_BRANCH=kag-$TAG" >> $GITHUB_OUTPUT
          else
            echo "KALDI_BRANCH: ${GITHUB_REF/refs\/heads\//}"
            echo "KALDI_BRANCH=${GITHUB_REF/refs\/heads\//}" >> $GITHUB_ENV
            echo "KALDI_BRANCH=${GITHUB_REF/refs\/heads\//}" >> $GITHUB_OUTPUT
          fi

      - name: Get Kaldi commit hash
        id: get-kaldi-commit
        run: |
          KALDI_COMMIT=$(git ls-remote https://github.com/daanzu/kaldi-fork-active-grammar.git $KALDI_BRANCH | cut -f1)
          echo "KALDI_COMMIT: $KALDI_COMMIT"
          echo "KALDI_COMMIT=$KALDI_COMMIT" >> $GITHUB_OUTPUT

      - name: Restore cached native binaries
        id: cache-native-binaries-restore
        uses: actions/cache/restore@v4
        with:
          key: native-${{ runner.os }}-intel-${{ steps.get-kaldi-commit.outputs.KALDI_COMMIT }}-${{ env.MACOSX_DEPLOYMENT_TARGET }}-${{ env.MKL_URL }}-v1
          path: kaldi_active_grammar/exec/macos

      - name: Install MKL (if enabled)
        if: ${{ env.MKL_URL != '' && steps.cache-native-binaries-restore.outputs.cache-hit != 'true' }}
        run: |
          echo "Installing MKL from: $MKL_URL"
          export MKL_FILE=${MKL_URL##*/}
          export MKL_FILE=${MKL_FILE%\.dmg}
          wget --no-verbose $MKL_URL
          hdiutil attach ${MKL_FILE}.dmg
          cp /Volumes/${MKL_FILE}/${MKL_FILE}.app/Contents/MacOS/silent.cfg .
          sed -i.bak -e 's/decline/accept/g' silent.cfg
          sudo /Volumes/${MKL_FILE}/${MKL_FILE}.app/Contents/MacOS/install.sh --silent silent.cfg

      - name: Install dependencies for native build
        if: steps.cache-native-binaries-restore.outputs.cache-hit != 'true'
        run: |
          python3 -m pip install --break-system-packages --user --upgrade scikit-build>=0.10.0 cmake ninja
          brew install automake sox
          brew reinstall gfortran  # For openblas
          # brew install autoconf libtool

      - name: Install dependencies for python build
        run: |
          python3 -m pip install --break-system-packages --user --upgrade setuptools wheel delocate

      - name: Build Python wheel
        run: |
          shopt -s nullglob
          echo "KALDI_BRANCH: $KALDI_BRANCH"
          echo "MKL_URL: $MKL_URL"
          ${{ steps.cache-native-binaries-restore.outputs.cache-hit == 'true' && 'KALDIAG_BUILD_SKIP_NATIVE=1' || '' }} python3 setup.py bdist_wheel
          ls -al dist/
          for whl in dist/*.whl; do
            unzip -l $whl
          done

      - name: Repair wheel with delocate
        run: |
          shopt -s nullglob
          for whl in dist/*.whl; do
            echo "Examining wheel before delocate: $whl"
            python3 -m delocate.cmd.delocate_listdeps -d $whl
            echo "Repairing wheel: $whl"
            python3 -m delocate.cmd.delocate_wheel -v -w wheelhouse -L exec/macos/libs --require-archs x86_64 $whl
          done
          # NOTE: This also downgrades the required MacOS version to the minimum possible
          ls -al wheelhouse/
          for whl in wheelhouse/*.whl; do
            echo "Examining repaired wheel: $whl"
            python3 -m delocate.cmd.delocate_listdeps -d $whl
          done

      - name: Extract native binaries from wheel after delocate repair, to save to cache
        if: steps.cache-native-binaries-restore.outputs.cache-hit != 'true'
        # We do this rather than manually caching all of the various kaldi/openfst libraries in their build locations
        run: |
          shopt -s nullglob
          # Assert there is only one wheel
          WHEEL_COUNT=$(ls wheelhouse/*.whl | wc -l)
          if [ "$WHEEL_COUNT" -ne 1 ]; then
            echo "Error: Expected exactly 1 wheel, found $WHEEL_COUNT"
            ls -al wheelhouse/
            exit 1
          fi
          WHEEL_FILE=$(ls wheelhouse/*.whl)
          echo "Extracting from wheel: $WHEEL_FILE"
          unzip -o $WHEEL_FILE 'kaldi_active_grammar/exec/macos/*'
          ls -al kaldi_active_grammar/exec/macos/
          otool -l kaldi_active_grammar/exec/macos/libkaldi-dragonfly.dylib | egrep -A2 'LC_RPATH|cmd LC_LOAD_DYLIB'
          otool -L kaldi_active_grammar/exec/macos/libkaldi-dragonfly.dylib
          lipo -archs kaldi_active_grammar/exec/macos/libkaldi-dragonfly.dylib

      - name: Save cached native binaries
        if: steps.cache-native-binaries-restore.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          key: ${{ steps.cache-native-binaries-restore.outputs.cache-primary-key }}
          path: kaldi_active_grammar/exec/macos

      - name: Upload native binaries to artifacts
        uses: actions/upload-artifact@v4
        with:
          name: native-macos-intel
          path: kaldi_active_grammar/exec/macos

      - name: Upload MacOS Intel wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-intel
          path: wheelhouse/*

      - name: Examine results
        run: |
          shopt -s nullglob
          for whl in wheelhouse/*.whl; do
            echo "::notice title=Built wheel::$(basename $whl)"
            unzip -l $whl
          done

  test-wheels:
    runs-on: ${{ matrix.os }}
    needs:
      - build-linux
      - build-windows
      - build-macos-arm
      - build-macos-intel
    if: ${{ always() && true }}  # Run even if some build jobs failed
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        # https://docs.github.com/en/actions/reference/runners/github-hosted-runners#standard-github-hosted-runners-for-public-repositories
        os: [ubuntu-22.04, ubuntu-24.04, windows-2022, windows-2025, macos-13, macos-14, macos-15, macos-26]
        # Status of Python versions (https://devguide.python.org/versions/)
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
    steps:
      - uses: actions/checkout@v5

      - name: Install just
        uses: taiki-e/install-action@just

      - name: Install uv and set the python version
        uses: astral-sh/setup-uv@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set artifact name
        id: artifact-name
        run: |
          case "${{ matrix.os }}" in
            ubuntu-*) echo "name=wheels-linux" >> $GITHUB_OUTPUT ;;
            windows-*) echo "name=wheels-windows" >> $GITHUB_OUTPUT ;;
            macos-13) echo "name=wheels-macos-intel" >> $GITHUB_OUTPUT ;;
            macos-*) echo "name=wheels-macos-arm" >> $GITHUB_OUTPUT ;;
            *) echo "Unexpected OS: ${{ matrix.os }}" 1>&2; exit 1 ;;
          esac

      - name: Download wheel artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ steps.artifact-name.outputs.name }}
          path: wheels/
        continue-on-error: true  # Continue even if no artifact found

      - name: Check wheels presence
        id: wheels-presence
        run: |
          shopt -s nullglob
          files=(wheels/*.whl)
          if (( ${#files[@]} > 0 )); then
            echo "found=true" >> $GITHUB_OUTPUT
            ls -al wheels/
          else
            echo "found=false" >> $GITHUB_OUTPUT
            echo "No wheel artifacts found for ${{ matrix.os }}" 1>&2
          fi

      - name: Restore cached tests setup
        id: cache-tests-setup-restore
        uses: actions/cache/restore@v4
        with:
          key: tests-setup-${{ hashFiles('tests/*.onnx, tests/*.onnx.json, tests/kaldi_model') }}-v1
          path: |
            tests/*.onnx
            tests/*.onnx.json
            tests/kaldi_model

      - name: Setup tests
        if: steps.wheels-presence.outputs.found == 'true' && steps.cache-tests-setup-restore.outputs.cache-hit != 'true'
        run: |
          just setup-tests

      - name: Save cached tests setup
        if: steps.wheels-presence.outputs.found == 'true' && steps.cache-tests-setup-restore.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          key: ${{ steps.cache-tests-setup-restore.outputs.cache-primary-key }}
          path: |
            tests/*.onnx
            tests/*.onnx.json
            tests/kaldi_model

      - name: Run tests
        if: steps.wheels-presence.outputs.found == 'true'
        run: |
          just test-package -v

  merge-wheels:
    runs-on: ubuntu-latest
    needs: [
      build-linux,
      build-windows,
      build-macos-arm,
      build-macos-intel,
    ]
    steps:
      - name: Merge all wheel artifacts
        uses: actions/upload-artifact/merge@v4
        with:
          name: wheels
          pattern: wheels-*
          delete-merged: false  # Optional: removes the individual artifacts
