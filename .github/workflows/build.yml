name: Build

on:
  push:
    branches: [ build ]
  pull_request:
    branches: [ build ]
  workflow_dispatch:
    # gh api repos/:owner/:repo/actions/workflows/build.yml/dispatches -F ref=master
    # gh workflow run build.yml --ref develop
    # gh workflow run build.yml

jobs:

  build-macos:
    runs-on: macos-10.15
    if: true
    env:
      MACOSX_DEPLOYMENT_TARGET: 10.9
      # MKL_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/tec/17172/m_mkl_2020.4.301.dmg
    steps:
      - uses: actions/checkout@v2
      - name: Get KALDI_BRANCH (kag-$TAG tag if commit is tagged; current branch name if not)
        run: |
          export TAG=$(git tag --points-at HEAD)
          if [[ $TAG ]]; then
            echo "KALDI_BRANCH=kag-$TAG" >> $GITHUB_ENV
          else
            echo "KALDI_BRANCH=${GITHUB_REF/refs\/heads\//}" >> $GITHUB_ENV
          fi
      - name: Dependencies
        run: |
          python3 -m pip install --upgrade setuptools wheel scikit-build cmake ninja
          brew install automake
          brew install autoconf
          brew install sox
          brew install libtool
          brew reinstall gfortran  # for openblas
      - name: MKL
        if: ${{ env.MKL_URL != 0 }}
        run: |
          echo "Installing MKL from: $MKL_URL"
          export MKL_FILE=${MKL_URL##*/}
          export MKL_FILE=${MKL_FILE%\.dmg}
          wget --no-verbose $MKL_URL
          hdiutil attach ${MKL_FILE}.dmg
          cp /Volumes/${MKL_FILE}/${MKL_FILE}.app/Contents/MacOS/silent.cfg .
          sed -i.bak -e 's/decline/accept/g' silent.cfg
          sudo /Volumes/${MKL_FILE}/${MKL_FILE}.app/Contents/MacOS/install.sh --silent silent.cfg
      - run: |
          python3 setup.py bdist_wheel
          ls -al dist/
      - uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist/*
          
  build-linux:
    runs-on: ubuntu-18.04
    if: true
    # env:
      # MKL_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/tec/16917/l_mkl_2020.4.304.tgz
    steps:
      - uses: actions/checkout@v2
      - name: Get KALDI_BRANCH (kag-$TAG tag if commit is tagged; current branch name if not)
        run: |
          export TAG=$(git tag --points-at HEAD)
          echo "TAG: $TAG"
          if [[ $TAG ]]; then
            echo "KALDI_BRANCH=kag-$TAG" >> $GITHUB_ENV
          else
            echo "KALDI_BRANCH=${GITHUB_REF/refs\/heads\//}" >> $GITHUB_ENV
          fi
      - name: Setup just
        run: |
          ls -al $HOME
          mkdir $HOME/bin
          curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to $HOME/bin/
          echo "$HOME/bin" >> $GITHUB_PATH
      - run: |
          echo "KALDI_BRANCH: $KALDI_BRANCH"
          echo "MKL_URL: $MKL_URL"
          just build-dockcross $KALDI_BRANCH $MKL_URL
          # cp dist/* wheelhouse/
          ls -al wheelhouse/
      - uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: wheelhouse/*

  build-windows:
    runs-on: windows-2019
    if: true
    env:
      MKL_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/tec/17173/w_mkl_2020.4.311.exe
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2
        with:
          path: main
      - name: Get KALDI_BRANCH (kag-$TAG tag if commit is tagged; current branch name if not)
        run: |
          export TAG=$(git tag --points-at HEAD)
          if [[ $TAG ]]; then
            echo "KALDI_BRANCH=kag-$TAG" >> $GITHUB_ENV
          else
            echo "KALDI_BRANCH=${GITHUB_REF/refs\/heads\//}" >> $GITHUB_ENV
          fi
      - uses: actions/checkout@v2
        with:
          repository: daanzu/openfst
          path: openfst
      - uses: actions/checkout@v2
        with:
          repository: daanzu/kaldi-fork-active-grammar
          path: kaldi
          ref: ${{ env.KALDI_BRANCH }}
      - name: Gather information
        run: |
          echo $GITHUB_WORKSPACE
          df -h
          ls -al '/c/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Redist/MSVC/'
          # ls -al '/c/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Redist/MSVC/14.26.28720'
          ls -al '/c/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Redist/MSVC/v142'
          # ls -al '/c/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Redist/MSVC/14.16.27012/x64/Microsoft.VC141.CRT'
          ls -al '/c/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Redist/MSVC/'*/x64/Microsoft.*.CRT
          # ls -alR /c/Program\ Files\ \(x86\)/Microsoft Visual Studio/2019/Enterprise/VC/Redist/MSVC/
          # ls -alR '/c/Program Files (x86)/Microsoft Visual Studio/'2019/Enterprise/VC/Redist/MSVC/
          vswhere
          vswhere -find 'VC\Redist\**\VC_redist.x64.exe'
      - name: Setup Kaldi build configuration
        run: |
          cd kaldi/windows
          cp kaldiwin_mkl.props kaldiwin.props
          # Add MKL static libraries to build
          perl -pi -e 's/<AdditionalDependencies>.*<\/AdditionalDependencies>/<AdditionalDependencies>mkl_sequential.lib;mkl_intel_thread.lib;mkl_core.lib;mkl_intel_lp64.lib;%(AdditionalDependencies)<\/AdditionalDependencies>/g' kaldiwin.props
          cp variables.props.dev variables.props
          # Add openfst location
          perl -pi -e 's/<OPENFST>.*<\/OPENFST>/<OPENFST>$ENV{GITHUB_WORKSPACE}\\openfst<\/OPENFST>/g' variables.props
          perl -pi -e 's/<OPENFSTLIB>.*<\/OPENFSTLIB>/<OPENFSTLIB>$ENV{GITHUB_WORKSPACE}\\openfst\\build_output<\/OPENFSTLIB>/g' variables.props
          perl generate_solution.pl --vsver vs2019 --enable-mkl --noportaudio
          # Add additional libfstscript library to dragonfly build file
          sed -i.bak '$i\
            <ItemDefinitionGroup>\
              <Link>\
                <AdditionalDependencies>libfstscript.lib;%(AdditionalDependencies)</AdditionalDependencies>\
              </Link>\
            </ItemDefinitionGroup>' ../kaldiwin_vs2019_MKL/kaldiwin/kaldi-dragonfly/kaldi-dragonfly.vcxproj
          perl get_version.pl
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2
      - name: Install MKL
        if: ${{ env.MKL_URL != 0 }}
        run: |
          echo "MKL_URL: $MKL_URL"
          mkdir -p mkl
          cd mkl
          curl -s $MKL_URL > mkl.exe
          ls -al
          ./mkl.exe --s --a install --output=$GITHUB_WORKSPACE/mkl/output.txt --eula=accept
          cat output.txt
      - name: Build OpenFST
        shell: cmd
        run: msbuild -t:Build -p:Configuration=Release -p:Platform=x64 -p:PlatformToolset=v141 -maxCpuCount -verbosity:minimal openfst/openfst.sln
      - name: Build Kaldi
        shell: cmd
        run: |
          msbuild -t:Build -p:Configuration=Release -p:Platform=x64 -p:PlatformToolset=v141 -p:WindowsTargetPlatformVersion=10.0.16299.0 -maxCpuCount -verbosity:minimal kaldi/kaldiwin_vs2019_MKL/kaldiwin/kaldi-dragonfly/kaldi-dragonfly.vcxproj
      - name: Build Python wheel
        run: |
          cd main
          python -m pip -V
          python -m pip install --upgrade setuptools wheel scikit-build cmake ninja
          # ls -alR ../
          mkdir -p kaldi_active_grammar/exec/windows
          cp ../kaldi/kaldiwin_vs2019_MKL/kaldiwin/kaldi-dragonfly/x64/Release/kaldi-dragonfly.dll kaldi_active_grammar/exec/windows/
          env KALDIAG_SETUP_RAW=1 python setup.py bdist_wheel
          ls -al dist/
      - uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: main/dist/*
      # - name: Copy Windows vc_redist
      #   run: |
      #     mkdir -p vc_redist
      #     cp '/c/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Redist/MSVC/14.26.28720'/vc_redist.x64.exe vc_redist/
      #     cp '/c/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Redist/MSVC/14.26.28720'/x64/Microsoft.*.CRT/* vc_redist/
      # - uses: actions/upload-artifact@v2
      #   with:
      #     name: vc_redist
      #     path: vc_redist/*
